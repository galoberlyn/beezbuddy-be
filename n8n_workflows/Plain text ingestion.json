{
  "name": "Plain text ingestion",
  "nodes": [
    {
      "parameters": {
        "jsCode": "const chunkSize = 1000;\nconst chunkOverlap = 200;\nconst text = $(\"plainTextIngestion\").first().json.body.data.replace(/\\n/, '');\n\nconst chunks = [];\nlet remainingText = text;\n\nwhile (remainingText.length > 0) {\n    let splitPoint;\n\n    // Try splitting at paragraph level first\n    splitPoint = remainingText.lastIndexOf(\"\\n\\n\", chunkSize);\n    \n    // If no paragraph split, try splitting at sentence level\n    if (splitPoint === -1) {\n        splitPoint = remainingText.lastIndexOf(\". \", chunkSize);\n    }\n\n    // If no sentence split, try splitting at word level\n    if (splitPoint === -1) {\n        splitPoint = remainingText.lastIndexOf(\" \", chunkSize);\n    }\n\n    // If still no split point, force cut at chunkSize\n    if (splitPoint === -1 || splitPoint < chunkSize * 0.5) {  \n        splitPoint = chunkSize; // Hard split if no good split point\n    }\n\n    // Extract chunk and adjust remaining text with overlap\n    let chunk = remainingText.substring(0, splitPoint).trim();\n    chunks.push(chunk);\n\n    // Move the pointer forward while keeping the overlap\n    remainingText = remainingText.substring(Math.max(0, splitPoint - chunkOverlap)).trim();\n\n    // Break if remaining text is too small to form another chunk\n    if (remainingText.length < chunkSize * 0.2) {\n        chunks.push(remainingText);\n        break;\n    }\n}\n\nreturn { chunks };"
      },
      "id": "c8cea439-e3d5-40cd-8a14-470116c23429",
      "name": "splitIntoChunksWeb",
      "type": "n8n-nodes-base.code",
      "position": [
        -480,
        320
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "fieldToSplitOut": "chunks",
        "options": {
          "destinationFieldName": "chunk"
        }
      },
      "id": "f32c0670-78b4-4757-8c8c-680dde5aaccd",
      "name": "splitWeb",
      "type": "n8n-nodes-base.splitOut",
      "position": [
        -300,
        300
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "maxItems": 20
      },
      "id": "c5ac4d44-dabf-4f83-8508-076ddd34d0a7",
      "name": "limitWeb",
      "type": "n8n-nodes-base.limit",
      "position": [
        -60,
        320
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "model": "llama3.2:latest",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOllama",
      "typeVersion": 1,
      "position": [
        180,
        440
      ],
      "id": "f8b4c301-218f-45f2-9452-95f504c282d6",
      "name": "Ollama Chat Model1",
      "credentials": {
        "ollamaApi": {
          "id": "v9rgcgOLa5Vrc0U2",
          "name": "Ollama account"
        }
      }
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "text",
              "separateBy": "other",
              "customSeparator": "###SPLIT###"
            }
          ]
        },
        "options": {}
      },
      "id": "638cdb89-0605-4eea-a8d5-3a51baa13293",
      "name": "Summarize1",
      "type": "n8n-nodes-base.summarize",
      "position": [
        460,
        380
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "mode": "insert",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStorePGVector",
      "typeVersion": 1.3,
      "position": [
        620,
        120
      ],
      "id": "192c8cce-b603-4af0-8aa3-5b6e303f7999",
      "name": "Postgres PGVector Store1",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "qzq8SujQ8Rd6EyHh",
          "name": "BeezBuddy DB"
        }
      }
    },
    {
      "parameters": {
        "model": "nomic-embed-text:v1.5"
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOllama",
      "typeVersion": 1,
      "position": [
        640,
        540
      ],
      "id": "5e538ca9-ec7e-493f-914f-7f135177fe78",
      "name": "Embeddings Ollama1",
      "credentials": {
        "ollamaApi": {
          "id": "v9rgcgOLa5Vrc0U2",
          "name": "Ollama account"
        }
      }
    },
    {
      "parameters": {
        "jsonMode": "expressionData",
        "jsonData": "={{ $json.concatenated_text }}",
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "file_id",
                "value": "={{ new Date().getTime() }}"
              },
              {
                "name": "title",
                "value": "={{ $('Create Metadata Title & Description').item.json.output.title }}"
              },
              {
                "name": "description",
                "value": "={{ $('Create Metadata Title & Description').item.json.output.description }}"
              }
            ]
          }
        }
      },
      "id": "9f35f70f-e4c0-4711-b134-c9b88318608a",
      "name": "Default Data Loader1",
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "position": [
        760,
        380
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "separator": "###SPLIT###"
      },
      "id": "b23cbf89-0354-4399-acec-d0e25bf8dadf",
      "name": "Character Text Splitter",
      "type": "@n8n/n8n-nodes-langchain.textSplitterCharacterTextSplitter",
      "position": [
        840,
        600
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=<document> \n $(\"plainTextIngestion\").first().json.body.data.replace(/\\n/, '')\n</document> \n\nHere is the chunk we want to situate within the overall document:\n\n<chunk> \n{{ $json.chunk }}\n</chunk> \n\nPlease:\n- Provide a short and succinct **context** to situate this chunk within the document for improved search retrieval.\n- Return the **original chunk** exactly as provided unless a correction is necessary.\n- If the chunk contains an **incomplete number, percentage, or entity**, correct it using the full document.\n- If part of a **sentence is cut off**, reconstruct the missing words only if necessary for clarity.\n- If the chunk is part of a table, include the complete table entry to maintain data integrity\n- Do not add any additional explanations or formatting beyond the required output.\n\nFill in the following format:\n[succinct context] : [original chunk or corrected version if necessary]\n\nYour response should contain only the text that replaces these placeholders, without including the placeholder labels themselves."
      },
      "id": "a6390df1-f182-444a-9566-392cafbb6aac",
      "name": "processWebContext",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "position": [
        180,
        160
      ],
      "typeVersion": 1.6
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "plaintext",
        "options": {}
      },
      "name": "plainTextIngestion",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -1380,
        320
      ],
      "id": "d6f4706f-af79-4d0f-afc0-77aef30000e8",
      "webhookId": "dbf986b9-f389-4c8b-873b-2999b3a24736",
      "notes": "curl -X POST \"http://localhost:5678/webhook-test/scrape\" \\\n  -H \"Content-Type: application/json\" \\\n  -d \"{\\\"data\\\": \\\"About\\nHello, I'm Galo, a full stack developer. I have a passion for writing code, reading others' code, and building products from scratch. My focus is on continuous improvement, both as an engineer and as a person. I believe in steady progress, always learning, always making a difference, and always delivering results. Always growing, always contributing, always shipping.\\n\\nWork Experience\\n2021-2024\\nSenior Frontend Tech Leader\\nPart of the architecture team to build eCommerce solutions for automotive leaders like Toyota, Jaguar, Land Rover etc and tech lead for global front end developers\\n\\nReact.js • PHP Symfony • Docker\\n\\n2020-present\\nFreelance Consultant\\nI am a consultant for startup companies that accelerates their business using technology like Point of Sale system, Booking systems and static websites\\n\\nReact.js • React Native • Docker • Node.js • Vue.js • CI/CD pipelines\\n\\n2018-2021\\nSenior Full Stack Developer / Tech Lead - The Penbrothers International\\nLead engineer for delivery team consisting of 5 developers, UI/UX designer, Business analyst and a QA engineer\\n\\nReact.js • Node.js • PHP Laravel • Progressive web apps • GCP\\n\\n2018\\nEngineer / Designer - Nokia TC (PH)\\nJunior C++ software engineer for 4G technology\\n\\nC++ • Object Oriented Programming\\n\\nSamples\\nGkey Password Manager\\nhammerA simple password manager app built by myself\\n\\nReact Native - Expo SDK 50\\n\\nBooking website\\nhammerA booking website for humblesustainability.com\\n\\nReact/Node.js\\n\\nOky Period Tracker App\\nhammerA simple period tracker app for Oky - Plan International PH\\n\\nFull Stack Developer Consultant - React Native\\n\\nPOS\\nhammerA point of sale system for a local hardware store in Baguio City, Philippines\\n\\nFull Stack Developer Contractor -React.js • Node.js • MySQL\\n\\nQR App\\nhammerA simple qr scanner and generator used during the Covid pandemic to scan qr forms or generate qrs\\n\\nReact.js\\n\\nGet Weekday\\nhammerA simple library to manage dates\\n\\nJavaScript\\n\\nLet's talk\\nWhile I'm not actively seeking new opportunities at the moment, my inbox is perpetually accessible. Whether you have a question or simply want to reach out and say hello @ gbgarlejo@gmail.com, I'll do my utmost to respond to you promptly.\\\"}\"\n"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\"title\":\"\",\"description\":\"\"}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        -660,
        580
      ],
      "id": "7604f927-6a3c-4339-8547-523b3636e2aa",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "model": "llama3.2:latest",
        "options": {
          "vocabOnly": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmOllama",
      "typeVersion": 1,
      "position": [
        -880,
        600
      ],
      "id": "bd025d1d-19d4-4979-bb4b-835c9feea9a0",
      "name": "Ollama Model",
      "credentials": {
        "ollamaApi": {
          "id": "v9rgcgOLa5Vrc0U2",
          "name": "Ollama account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Create a metadata object with \"title\" and \"description\" based on the document below. This metadata will be used to store the document in a vector database for RAG. \n\nOutput requirements:\n- Only output a valid JSON object with exactly two keys: \"title\" and \"description\".\n- Do not include markdown, code blocks, comments, or extra text.\n- The \"title\" should be a concise name representing the document.\n- The \"description\" should be a short summary (1-2 sentences) of the document.\n- Example of output: {\n\"output\": \n{\n\"title\": \n\"...\",\n\"description\": \n\"...\"\n}\n}\n\nJust output a JSON object strictly\n\n##Document\n{{ $('Document Data').item.json.data }}",
        "hasOutputParser": true
      },
      "id": "1facb19b-7153-41ce-b959-0a2d017c95da",
      "name": "Create Metadata Title & Description",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "position": [
        -900,
        320
      ],
      "typeVersion": 1.6
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"data\":  {{ JSON.stringify($json.body.data) }}\n} ",
        "options": {}
      },
      "id": "2556a63b-bb91-411a-9a74-3ab1b3e1719a",
      "name": "Document Data",
      "type": "n8n-nodes-base.set",
      "position": [
        -1140,
        320
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "upsert",
        "projectId": "beezbuddy-89aa6",
        "collection": "={{ $json.organizationId }}",
        "updateKey": "agentId",
        "columns": "=ready"
      },
      "type": "n8n-nodes-base.googleFirebaseCloudFirestore",
      "typeVersion": 1.1,
      "position": [
        1760,
        240
      ],
      "id": "d89fa04d-49ad-4f74-ba26-309204ec0101",
      "name": "Create or update a document",
      "executeOnce": false,
      "alwaysOutputData": false,
      "credentials": {
        "googleApi": {
          "id": "XBWGvfEe7IhwK8Cu",
          "name": "Google Service Account account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "19804b28-2d91-4c76-a3ff-256d38d5ccef",
              "name": "organizationId",
              "value": "={{ $('Web Ingest').item.json.body.organizationId }}",
              "type": "string"
            },
            {
              "id": "e5553d77-31ec-4f17-be74-27054ef7a369",
              "name": "agentId",
              "value": "={{ $('Web Ingest').item.json.body.agentId }}",
              "type": "string"
            },
            {
              "id": "bba11a13-11e8-4dbc-85d7-46892be6a73a",
              "name": "ready",
              "value": true,
              "type": "boolean"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1080,
        120
      ],
      "id": "b4cc6264-3811-4a49-be7c-aa0e5b092e3a",
      "name": "Edit Fields",
      "executeOnce": true
    },
    {
      "parameters": {
        "method": "DELETE",
        "url": "http://localhost:3000/api/s2s/embeddings",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $('plainTextIngestion').item.json.body.embeddingsToReplace }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1480,
        220
      ],
      "id": "13eb4348-9954-4cd9-9a04-878916fb390d",
      "name": "HTTP Request",
      "credentials": {
        "httpBasicAuth": {
          "id": "pSBWZa1YRUbmHqJj",
          "name": "s2s"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "splitIntoChunksWeb": {
      "main": [
        [
          {
            "node": "splitWeb",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "splitWeb": {
      "main": [
        [
          {
            "node": "limitWeb",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "limitWeb": {
      "main": [
        [
          {
            "node": "processWebContext",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ollama Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "processWebContext",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Summarize1": {
      "main": [
        [
          {
            "node": "Postgres PGVector Store1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Ollama1": {
      "ai_embedding": [
        [
          {
            "node": "Postgres PGVector Store1",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader1": {
      "ai_document": [
        [
          {
            "node": "Postgres PGVector Store1",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Character Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader1",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "processWebContext": {
      "main": [
        [
          {
            "node": "Summarize1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "plainTextIngestion": {
      "main": [
        [
          {
            "node": "Document Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Create Metadata Title & Description",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Ollama Model": {
      "ai_languageModel": [
        [
          {
            "node": "Create Metadata Title & Description",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Create Metadata Title & Description": {
      "main": [
        [
          {
            "node": "splitIntoChunksWeb",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Document Data": {
      "main": [
        [
          {
            "node": "Create Metadata Title & Description",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Create or update a document",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres PGVector Store1": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "fbce89fc-c591-4b52-b982-e0461afa7abc",
  "meta": {
    "instanceId": "36207d550658bbf91be2a7d3a9212d262b1fd84b34f51d4df4ed31a5096855d0"
  },
  "id": "aKdTvHWWNJqchnRz",
  "tags": [
    {
      "createdAt": "2025-08-28T23:25:12.564Z",
      "updatedAt": "2025-08-28T23:25:12.564Z",
      "id": "zVaBa15jhZUr2Ti4",
      "name": "beezbuddy"
    }
  ]
}