{
  "name": "File Upload Ingestion",
  "nodes": [
    {
      "parameters": {
        "mode": "insert",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStorePGVector",
      "typeVersion": 1.3,
      "position": [
        1240,
        -120
      ],
      "id": "03b64c29-5d40-4b63-a607-3ac41df598ea",
      "name": "Postgres PGVector Store",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "qzq8SujQ8Rd6EyHh",
          "name": "BeezBuddy DB"
        }
      }
    },
    {
      "parameters": {
        "model": "nomic-embed-text:v1.5"
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOllama",
      "typeVersion": 1,
      "position": [
        1160,
        220
      ],
      "id": "fd8e9b10-9c4f-4544-9135-49536572376a",
      "name": "Embeddings Ollama",
      "credentials": {
        "ollamaApi": {
          "id": "v9rgcgOLa5Vrc0U2",
          "name": "Ollama account"
        }
      }
    },
    {
      "parameters": {
        "operation": "pdf",
        "binaryPropertyName": "file",
        "options": {}
      },
      "id": "07c6bf2e-c046-458d-92d1-7354f661c432",
      "name": "Extract from PDF",
      "type": "n8n-nodes-base.extractFromFile",
      "position": [
        -720,
        -100
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "binaryPropertyName": "file",
        "options": {}
      },
      "id": "12984caa-1cfa-4fc9-95b5-0bb3f978ad0f",
      "name": "Extract from CSV",
      "type": "n8n-nodes-base.extractFromFile",
      "position": [
        -740,
        120
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"data\":  {{ JSON.stringify($json.text) }}\n} ",
        "options": {}
      },
      "id": "f0c66585-3119-41ab-93a8-ecab7a3972fc",
      "name": "Document Data",
      "type": "n8n-nodes-base.set",
      "position": [
        -460,
        0
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Create metadata title and metadata description based on the document specified below (below ##Document). Metadata title and metadata description will be used to seperate data in vector DB that will be used for RAG.\n\nNote: Do not output the schema or other non related data. Just output the JSON i mentioned\n\n##Document\n{{ $('Document Data').item.json.data }}",
        "hasOutputParser": true
      },
      "id": "38be95ec-5805-4e04-ad35-fcb1be24304d",
      "name": "Create Metadata Title & Description",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "position": [
        -280,
        0
      ],
      "typeVersion": 1.6
    },
    {
      "parameters": {
        "model": "llama3.2:latest",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmOllama",
      "typeVersion": 1,
      "position": [
        -420,
        240
      ],
      "id": "c47fbcea-c6de-49fe-b309-b9fb1200feb7",
      "name": "Ollama Model",
      "credentials": {
        "ollamaApi": {
          "id": "v9rgcgOLa5Vrc0U2",
          "name": "Ollama account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=<document> \n{{ $('Document Data').first().json.data }}\n</document> \n\nHere is the chunk we want to situate within the overall document:\n\n<chunk> \n{{ $json.chunk }}\n</chunk> \n\nPlease:\n- Provide a short and succinct **context** to situate this chunk within the document for improved search retrieval.\n- Return the **original chunk** exactly as provided unless a correction is necessary.\n- If the chunk contains an **incomplete number, percentage, or entity**, correct it using the full document.\n- If part of a **sentence is cut off**, reconstruct the missing words only if necessary for clarity.\n- If the chunk is part of a table, include the complete table entry to maintain data integrity\n- Do not add any additional explanations or formatting beyond the required output.\n\nFill in the following format:\n[succinct context] : [original chunk or corrected version if necessary]\n\nYour response should contain only the text that replaces these placeholders, without including the placeholder labels themselves."
      },
      "id": "32512990-23cc-4cf5-85c4-4f5654f05af7",
      "name": "Process Context",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "position": [
        680,
        -200
      ],
      "typeVersion": 1.6
    },
    {
      "parameters": {
        "fieldToSplitOut": "chunks",
        "options": {
          "destinationFieldName": "chunk"
        }
      },
      "id": "5cbc850a-4212-48c0-ac07-118adfde7565",
      "name": "Split Out",
      "type": "n8n-nodes-base.splitOut",
      "position": [
        280,
        -200
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "maxItems": 20
      },
      "id": "82d9fcce-0f0a-4bca-b40a-9737b2cbba4a",
      "name": "Limit",
      "type": "n8n-nodes-base.limit",
      "position": [
        460,
        -200
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "text",
              "separateBy": "other",
              "customSeparator": "###SPLIT###"
            }
          ]
        },
        "options": {}
      },
      "id": "c49a9ad9-b5ae-4e94-af8f-6e9060ff2b0d",
      "name": "Summarize",
      "type": "n8n-nodes-base.summarize",
      "position": [
        1000,
        -200
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "jsCode": "const chunkSize = 1000;\nconst chunkOverlap = 200;\n//const text = $node[\"ABC\"].json.data.replace(/\\n/, '');\nconst text = $items(\"Document Data\")[0].json.data.replace(/\\n/, '');\n\nconst chunks = [];\nlet remainingText = text;\n\nwhile (remainingText.length > 0) {\n    let splitPoint;\n\n    // Try splitting at paragraph level first\n    splitPoint = remainingText.lastIndexOf(\"\\n\\n\", chunkSize);\n    \n    // If no paragraph split, try splitting at sentence level\n    if (splitPoint === -1) {\n        splitPoint = remainingText.lastIndexOf(\". \", chunkSize);\n    }\n\n    // If no sentence split, try splitting at word level\n    if (splitPoint === -1) {\n        splitPoint = remainingText.lastIndexOf(\" \", chunkSize);\n    }\n\n    // If still no split point, force cut at chunkSize\n    if (splitPoint === -1 || splitPoint < chunkSize * 0.5) {  \n        splitPoint = chunkSize; // Hard split if no good split point\n    }\n\n    // Extract chunk and adjust remaining text with overlap\n    let chunk = remainingText.substring(0, splitPoint).trim();\n    chunks.push(chunk);\n\n    // Move the pointer forward while keeping the overlap\n    remainingText = remainingText.substring(Math.max(0, splitPoint - chunkOverlap)).trim();\n\n    // Break if remaining text is too small to form another chunk\n    if (remainingText.length < chunkSize * 0.2) {\n        chunks.push(remainingText);\n        break;\n    }\n}\n\nreturn { chunks };"
      },
      "id": "7d9ec1ef-3650-496b-8cef-be439a28a84f",
      "name": "Split into chunks",
      "type": "n8n-nodes-base.code",
      "position": [
        120,
        -200
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "model": "llama3.2:latest",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOllama",
      "typeVersion": 1,
      "position": [
        640,
        0
      ],
      "id": "bf00a9c1-6691-40cc-8764-e599352ccc3c",
      "name": "Ollama Chat Model",
      "credentials": {
        "ollamaApi": {
          "id": "v9rgcgOLa5Vrc0U2",
          "name": "Ollama account"
        }
      }
    },
    {
      "parameters": {
        "separator": "###SPLIT###"
      },
      "id": "928a0869-cec1-4687-999b-11ed6fb90341",
      "name": "Character Text Splitter1",
      "type": "@n8n/n8n-nodes-langchain.textSplitterCharacterTextSplitter",
      "position": [
        1360,
        360
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "jsonMode": "expressionData",
        "jsonData": "={{ $json.concatenated_text }}",
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "file_id",
                "value": "={{ new Date().getTime() }}"
              },
              {
                "name": "title",
                "value": "={{ $('Create Metadata Title & Description').item.json.output.title }}"
              },
              {
                "name": "description",
                "value": "={{ $('Create Metadata Title & Description').item.json.output.description }}"
              },
              {
                "name": "={{ $('File ingest').jso }}"
              }
            ]
          }
        }
      },
      "id": "5cd360f7-7916-48da-bab0-ef64ca1a0b95",
      "name": "Default Data Loader",
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "position": [
        1420,
        160
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\"title\":\"\",\"description\":\"\"}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        -60,
        240
      ],
      "id": "4c578c47-0af6-4fe0-999e-6e2de3b2d2bc",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "upload",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1740,
        20
      ],
      "id": "dc65a380-b3d8-428c-9c3d-e1de7d02aa9b",
      "name": "File ingest",
      "webhookId": "64ab0828-7bb4-4e2f-84dc-74ad079e19a2",
      "notes": "curl -X POST \"http://localhost:5678/webhook-test/upload\" \\\n  -F \"file=@./GaloBerlynGarlejo_CV4 (1).pdf;type=application/pdf\" \\\n  -F \"agentName=John Doe\"\n"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "id": "e959d5a8-d311-4a29-b400-7c07468a72fe",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $binary.file.mimeType }}",
                    "rightValue": "application/pdf"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "application/pdf"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "id": "d5ae6f2d-e62d-4e08-aa06-629e6dfa7ee8",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $binary.file.mimeType }}",
                    "rightValue": "text/csv"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "text/csv"
            }
          ]
        },
        "options": {}
      },
      "id": "3d5ccd98-9664-4a71-9412-27cc9fb58b54",
      "name": "Switch",
      "type": "n8n-nodes-base.switch",
      "position": [
        -1300,
        20
      ],
      "typeVersion": 3.2
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "operation": "upsert",
        "projectId": "beezbuddy-89aa6",
        "collection": "={{ $json.organizationId }}",
        "updateKey": "agentId",
        "columns": "=ready"
      },
      "type": "n8n-nodes-base.googleFirebaseCloudFirestore",
      "typeVersion": 1.1,
      "position": [
        2380,
        40
      ],
      "id": "e836af08-83bc-48de-a769-4825d161528d",
      "name": "Create or update a document",
      "executeOnce": false,
      "alwaysOutputData": false,
      "credentials": {
        "googleApi": {
          "id": "XBWGvfEe7IhwK8Cu",
          "name": "Google Service Account account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "19804b28-2d91-4c76-a3ff-256d38d5ccef",
              "name": "organizationId",
              "value": "={{ $('File ingest').item.json.body.organizationId }}",
              "type": "string"
            },
            {
              "id": "e5553d77-31ec-4f17-be74-27054ef7a369",
              "name": "agentId",
              "value": "={{ $('File ingest').item.json.body.agentId }}",
              "type": "string"
            },
            {
              "id": "bba11a13-11e8-4dbc-85d7-46892be6a73a",
              "name": "ready",
              "value": true,
              "type": "boolean"
            },
            {
              "id": "117349b7-aa23-45e5-bb02-74b7ea2ddcfe",
              "name": "",
              "value": "",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1680,
        -120
      ],
      "id": "aaa2678c-8167-4c53-a3a6-f7b5b4e32c9f",
      "name": "Edit Fields",
      "executeOnce": true
    },
    {
      "parameters": {
        "method": "DELETE",
        "url": "http://localhost:3000/api/s2s/embeddings",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $('File ingest').item.json.body.embeddingsToReplace }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2080,
        240
      ],
      "id": "80fc8dba-fc1c-4216-8e7b-a978aaa6f467",
      "name": "HTTP Request1",
      "credentials": {
        "httpBasicAuth": {
          "id": "pSBWZa1YRUbmHqJj",
          "name": "s2s"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('File ingest').item.json.body.embeddingsToReplace }}",
                    "rightValue": "undefined",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "f0e2d43c-4991-45ac-8539-363f933d0a2a"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "No embeddings to replace, skip deletion"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "f40f9b6d-b82c-48d7-ab96-c1aeb8a5536b",
                    "leftValue": "={{ $('File ingest').item.json.body.embeddingsToReplace }}",
                    "rightValue": "undefined",
                    "operator": {
                      "type": "string",
                      "operation": "notEquals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "embeddings detected, delete it"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        1920,
        -40
      ],
      "id": "d4cfba8d-e865-428c-8ca3-2a20eee388ad",
      "name": "Switch1"
    }
  ],
  "pinData": {},
  "connections": {
    "Embeddings Ollama": {
      "ai_embedding": [
        [
          {
            "node": "Postgres PGVector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Extract from PDF": {
      "main": [
        [
          {
            "node": "Document Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from CSV": {
      "main": [
        [
          {
            "node": "Document Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Document Data": {
      "main": [
        [
          {
            "node": "Create Metadata Title & Description",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ollama Model": {
      "ai_languageModel": [
        [
          {
            "node": "Create Metadata Title & Description",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Process Context": {
      "main": [
        [
          {
            "node": "Summarize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Limit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit": {
      "main": [
        [
          {
            "node": "Process Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Summarize": {
      "main": [
        [
          {
            "node": "Postgres PGVector Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split into chunks": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Metadata Title & Description": {
      "main": [
        [
          {
            "node": "Split into chunks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ollama Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Process Context",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Character Text Splitter1": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Postgres PGVector Store",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Create Metadata Title & Description",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "File ingest": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Extract from PDF",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract from CSV",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres PGVector Store": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Create or update a document",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch1": {
      "main": [
        [
          {
            "node": "Create or update a document",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner"
  },
  "versionId": "5af41867-2d37-47fa-a9c9-b7779ce43c59",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "36207d550658bbf91be2a7d3a9212d262b1fd84b34f51d4df4ed31a5096855d0"
  },
  "id": "sHKlzubKMnf2SkRK",
  "tags": [
    {
      "createdAt": "2025-08-28T23:25:12.564Z",
      "updatedAt": "2025-08-28T23:25:12.564Z",
      "id": "zVaBa15jhZUr2Ti4",
      "name": "beezbuddy"
    }
  ]
}